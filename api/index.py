from flask import Flask, request, jsonify
import requests
import logging
import os
from datetime import datetime

# Configurar logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = Flask(__name__)

# Configuraci√≥n de variables de entorno
WHATSAPP_TOKEN = os.environ.get('WHATSAPP_ACCESS_TOKEN')
VERIFY_TOKEN = os.environ.get('WHATSAPP_VERIFY_TOKEN', 'JoyasBot2025!')
PHONE_NUMBER_ID = os.environ.get('WHATSAPP_PHONE_NUMBER_ID', '')
WHATSAPP_API_URL = f"https://graph.facebook.com/v21.0/{PHONE_NUMBER_ID}/messages" if PHONE_NUMBER_ID else None

# ==============================================================================
# ====> √ÅREA DE CONFIGURACI√ìN DEL NEGOCIO (Aqu√≠ es donde modificas todo) <====
# ==============================================================================

INFO_NEGOCIO = {
    "productos": {
        "producto_1": {
            "nombre_completo": "Collar M√°gico Sol Radiant",
            "precio": "S/ 69.00",
            "material": "Acero inoxidable quir√∫rgico de alta calidad",
            "propiedades": "Piedra termocr√≥mica que cambia de color con la temperatura.",
            "palabras_clave": [
                "1",  # Para responder al men√∫
                "sol radiant", 
                "collar m√°gico", 
                "collar que cambia color",
                "precio y es ideal para regalo" # Para el mensaje de la publicidad
            ]
        }
        # Para agregar m√°s productos, solo copia y pega el bloque de "producto_1"
        # y c√°mbialo a "producto_2", "producto_3", etc.
    },
    "politicas_envio": {
        "delivery_lima": {
            "modalidad": "Pago Contra Entrega a domicilio",
            "costo": "Gratis",
            "adelanto_requerido": "No requiere adelanto",
            "tiempo_entrega": "1 a 2 d√≠as h√°biles"
        },
        "envio_shalom": {
            "modalidad": "Recojo en agencia Shalom",
            "costo": "Gratis",
            "adelanto_requerido": "S/ 20.00",
            "tiempo_entrega_lima_sin_cobertura": "2 a 3 d√≠as h√°biles",
            "tiempo_entrega_provincias": "3 a 7 d√≠as h√°biles",
            "info_adicional": "Todos los env√≠os a provincias y zonas de Lima sin cobertura son √∫nicamente por Shalom."
        }
    },
    "datos_generales": {
        "tienda_fisica": "No contamos con tienda f√≠sica. Somos una tienda 100% online para ofrecerte los mejores precios.",
        "garantia": "Ofrecemos una garant√≠a de 15 d√≠as por cualquier defecto de f√°brica.",
        "material_joyas": "Todas nuestras joyas son de acero inoxidable quir√∫rgico de alta calidad, son hipoalerg√©nicas y resistentes.",
        "medida_cadena": "El largo est√°ndar de nuestras cadenas es de 45 cm.",
        "empaque": "¬°S√≠! Todas tus compras incluyen una hermosa cajita de regalo üéÅ.",
        "metodos_pago": {
            "contra_entrega": "Para delivery en Lima puedes pagar con Efectivo, Yape o Plin al momento de recibir tu pedido.",
            "adelanto_shalom": "El adelanto para env√≠os por Shalom puedes realizarlo por Yape, Plin o Transferencia bancaria."
        }
    }
}

COBERTURA_DELIVERY_LIMA = [
    "ate", "barranco", "bellavista", "bre√±a", "callao", "carabayllo", 
    "carmen de la legua", "cercado de lima", "chorrillos", "comas", "el agustino", 
    "independencia", "jesus maria", "la molina", "la perla", "la punta", 
    "la victoria", "lince", "los olivos", "magdalena", "miraflores", 
    "pueblo libre", "puente piedra", "rimac", "san borja", "san isidro", 
    "san juan de lurigancho", "san juan de miraflores", "san luis", 
    "san martin de porres", "san miguel", "santa anita", "surco", 
    "surquillo", "villa el salvador", "villa maria del triunfo"
]

ABREVIATURAS_DISTRITOS = {
    "sjl": "san juan de lurigancho",
    "sjm": "san juan de miraflores",
    "smp": "san martin de porres",
    "vmt": "villa maria del triunfo",
    "ves": "villa el salvador",
    "lima centro": "cercado de lima"
}
# ==============================================================================
# ====> FIN DEL √ÅREA DE CONFIGURACI√ìN <==== (Normalmente no necesitas tocar nada debajo de esta l√≠nea)
# ==============================================================================


def verificar_cobertura(texto_usuario):
    """Verifica si el texto menciona un distrito con cobertura."""
    texto = texto_usuario.lower().strip()
    for distrito in COBERTURA_DELIVERY_LIMA:
        if distrito in texto:
            return distrito.title()
    for abreviatura, nombre_completo in ABREVIATURAS_DISTRITOS.items():
        if f" {abreviatura} " in f" {texto} " or texto == abreviatura:
            return nombre_completo.title()
    return None

# ==============================================================================
# ====> L√ìGICA DE RESPUESTAS DEL BOT (El "cerebro" que decide qu√© responder) <====
# ==============================================================================

def generate_response(text, name):
    """Genera respuestas autom√°ticas utilizando la base de datos del negocio."""
    text = text.lower()
    
    # --- Verificaci√≥n de Cobertura ---
    distrito_encontrado = verificar_cobertura(text)
    if distrito_encontrado:
        politica_delivery = INFO_NEGOCIO['politicas_envio']['delivery_lima']
        return (f"¬°Buenas noticias, {name}! S√≠ tenemos cobertura de delivery contra entrega en {distrito_encontrado}. üéâ\n\n"
                f"Modalidad: {politica_delivery['modalidad']}\n"
                f"Costo: {politica_delivery['costo']}\n"
                f"Tiempo: {politica_delivery['tiempo_entrega']}\n\n"
                f"¬øTe gustar√≠a coordinar tu pedido?")

    # --- Consultas de Productos ---
    producto_1 = INFO_NEGOCIO['productos']['producto_1']
    if any(palabra in text for palabra in producto_1['palabras_clave']):
        return (f"¬°Te refieres a nuestro incre√≠ble {producto_1['nombre_completo']}! ‚òÄÔ∏è\n\n"
                f"Es una joya √∫nica con una {producto_1['propiedades']}.\n"
                f"Material: {producto_1['material']}.\n"
                f"Precio: {producto_1['precio']}.\n\n"
                f"¬°Es perfecto para regalo! ¬øLo quieres para ti o para alguien especial?")

    # --- Consultas de Pol√≠ticas y Datos Generales ---
    if any(palabra in text for palabra in ['env√≠o', 'delivery', 'entrega', 'shalom', 'cobertura']):
        delivery = INFO_NEGOCIO['politicas_envio']['delivery_lima']
        shalom = INFO_NEGOCIO['politicas_envio']['envio_shalom']
        return (f"¬°Claro, {name}! Manejamos dos tipos de env√≠o:\n\n"
                f"1Ô∏è‚É£ *Delivery para Lima (con cobertura):*\n"
                f"- Modalidad: {delivery['modalidad']}\n"
                f"- Costo: {delivery['costo']}\n"
                f"- Tiempo: {delivery['tiempo_entrega']}\n\n"
                f"2Ô∏è‚É£ *Env√≠o Nacional y Lima (sin cobertura):*\n"
                f"- Empresa: Shalom (recojo en agencia)\n"
                f"- Costo: {shalom['costo']}\n"
                f"- Adelanto: {shalom['adelanto_requerido']}\n"
                f"- Tiempo: {shalom['tiempo_entrega_provincias']}\n\n"
                f"Dime tu distrito para confirmarte tu tipo de env√≠o.")

    if any(palabra in text for palabra in ['pago', 'pagar', 'yape', 'plin', 'm√©todos']):
        pagos = INFO_NEGOCIO['datos_generales']['metodos_pago']
        return (f"¬°Claro! Estos son nuestros m√©todos de pago:\n\n"
                f"üí≥ *Para Delivery en Lima:*\n{pagos['contra_entrega']}\n\n"
                f"üí∏ *Para env√≠os por Shalom:*\n{pagos['adelanto_shalom']}")

    if 'garantia' in text:
        return INFO_NEGOCIO['datos_generales']['garantia']

    if 'material' in text:
        return INFO_NEGOCIO['datos_generales']['material_joyas']
        
    if any(palabra in text for palabra in ['medida', 'tama√±o', 'largo', 'cadena']):
        return INFO_NEGOCIO['datos_generales']['medida_cadena']

    if any(palabra in text for palabra in ['empaque', 'caja', 'regalo']):
        return INFO_NEGOCIO['datos_generales']['empaque']
        
    if any(palabra in text for palabra in ['tienda', 'f√≠sica', 'local', 'ubicacion']):
        return INFO_NEGOCIO['datos_generales']['tienda_fisica']

    # --- Saludos y Respuestas Gen√©ricas (CON SOLUCI√ìN PARA ERRORES DE TIPEO) ---
    saludos_comunes = ['hola', 'hila', 'ola', 'buenos', 'buenas', 'bnas', 'qu√© tal', 'q tal', 'info']
    if any(saludo in text for saludo in saludos_comunes):
        productos_disponibles = []
        if 'producto_1' in INFO_NEGOCIO['productos']:
            productos_disponibles.append("1Ô∏è‚É£ Collar Sol Radiant (Brilla con tu energ√≠a)")
        
        texto_productos = "\n".join(productos_disponibles)
        
        return (f"¬°Hola {name}! üëã‚ú® Soy tu asesora virtual de Daaqui Joyas. ¬°Bienvenid@!\n\n"
                f"Actualmente tenemos en stock estas joyas m√°gicas con env√≠o gratis:\n\n"
                f"{texto_productos}\n\n"
                f"Escribe el n√∫mero o el nombre del collar que te gustar√≠a conocer. Tambi√©n puedes preguntar por 'env√≠o' o 'pagos'.")
        
    if any(palabra in text for palabra in ['gracias', 'grs', 'perfecto', 'genial', 'ok']):
        return f"¬°De nada, {name}! üòä‚ú® Si tienes alguna otra consulta, no dudes en preguntar."
    
    if any(palabra in text for palabra in ['adi√≥s', 'bye', 'hasta luego', 'chao']):
        return f"¬°Hasta pronto, {name}! üëã‚ú® Fue un placer atenderte. Te esperamos en Daaqui Joyas."


    # --- Respuesta por Defecto ---
    else:
        return f"¬°Hola {name}! üëã Gracias por tu mensaje. No entend√≠ muy bien tu consulta. ¬øPodr√≠as reformularla? Puedes preguntar sobre:\n\n- El 'collar sol radiant'\n- M√©todos de env√≠o\n- Cobertura de delivery\n- M√©todos de pago"

# ==============================================================================
# ====> L√ìGICA INTERNA DEL BOT (Normalmente no necesitas tocar esto) <====
# ==============================================================================

@app.route('/api/webhook', methods=['GET', 'POST'])
def webhook():
    if request.method == 'GET':
        mode = request.args.get('hub.mode')
        token = request.args.get('hub.verify_token')
        challenge = request.args.get('hub.challenge')
        if mode == 'subscribe' and token == VERIFY_TOKEN:
            logger.info("Webhook verificado exitosamente")
            return challenge
        else:
            logger.warning(f"Verificaci√≥n fallida - Token esperado: {VERIFY_TOKEN}, Token recibido: {token}")
            return 'Forbidden', 403
    elif request.method == 'POST':
        try:
            data = request.get_json()
            logger.info(f"Datos recibidos: {data}")
            if data.get('object') == 'whatsapp_business_account':
                for entry in data.get('entry', []):
                    for change in entry.get('changes', []):
                        if change.get('field') == 'messages':
                            value = change.get('value', {})
                            for message in value.get('messages', []):
                                process_message(message, value.get('contacts', []))
            return jsonify({'status': 'success'}), 200
        except Exception as e:
            logger.error(f"Error procesando webhook: {e}")
            return jsonify({'error': str(e)}), 500

def process_message(message, contacts):
    """Procesa un mensaje entrante y env√≠a una respuesta."""
    try:
        from_number = message.get('from')
        message_type = message.get('type')
        contact_name = "Usuario"
        for contact in contacts:
            if contact.get('wa_id') == from_number:
                contact_name = contact.get('profile', {}).get('name', 'Usuario')
                break
        
        logger.info(f"Procesando mensaje de {contact_name} ({from_number})")
        
        if message_type == 'text':
            text_body = message.get('text', {}).get('body', '').lower()
            logger.info(f"Mensaje de texto: {text_body}")
            
            response_text = generate_response(text_body, contact_name)
            
            if response_text:
                ### CAMBIO 1: Ahora convertimos el texto a un payload ###
                text_payload = {"type": "text", "text": {"body": response_text}}
                send_whatsapp_message(from_number, text_payload)
        
        elif message_type in ['image', 'document', 'audio', 'video']:
            logger.info(f"Mensaje multimedia recibido: {message_type}")
            multimedia_response_payload = {"type": "text", "text": {"body": f"¬°Hola {contact_name}! He recibido tu {message_type}. ¬øEn qu√© puedo ayudarte con nuestras joyas? üíé‚ú®"}}
            send_whatsapp_message(from_number, multimedia_response_payload)
        
    except Exception as e:
        logger.error(f"Error procesando mensaje: {e}")

def send_whatsapp_message(to_number, message_data):
    """Env√≠a un mensaje de WhatsApp usando un payload de datos."""
    if not WHATSAPP_TOKEN or not WHATSAPP_API_URL:
        logger.error("Token de WhatsApp o URL de API no configurados.")
        return False
    
    headers = {'Authorization': f'Bearer {WHATSAPP_TOKEN}', 'Content-Type': 'application/json'}
    
    ### CAMBIO 2: La funci√≥n ahora es m√°s flexible ###
    data = {"messaging_product": "whatsapp", "to": to_number}
    data.update(message_data)
    
    try:
        response = requests.post(WHATSAPP_API_URL, headers=headers, json=data)
        if response.status_code == 200:
            logger.info(f"Mensaje enviado exitosamente a {to_number}")
            return True
        else:
            logger.error(f"Error enviando mensaje: {response.status_code} - {response.text}")
            return False
    except Exception as e:
        logger.error(f"Excepci√≥n enviando mensaje: {e}")
        return False

# Endpoints adicionales (normalmente no se tocan)
@app.route('/api/health', methods=['GET'])
def health():
    return jsonify({'status': 'healthy', 'timestamp': datetime.now().isoformat()})

@app.route('/api', methods=['GET'])
@app.route('/', methods=['GET'])
def home():
    return jsonify({'message': 'Bot de WhatsApp para Joyer√≠a Daaqui', 'status': 'active'})

if __name__ == '__main__':
    app.run(debug=True)