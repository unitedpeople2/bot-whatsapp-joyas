# ==========================================================
# 1. IMPORTACIONES Y CONFIGURACI√ìN INICIAL
# ==========================================================
from flask import Flask, request, jsonify
import requests
import logging
import os
from datetime import datetime
import re

# Importamos nuestra nueva herramienta para Google Sheets
from google_sheets_handler import guardar_pedido

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = Flask(__name__)

# Configuraci√≥n de variables de entorno de WhatsApp
WHATSAPP_TOKEN = os.environ.get('WHATSAPP_ACCESS_TOKEN')
VERIFY_TOKEN = os.environ.get('WHATSAPP_VERIFY_TOKEN', 'JoyasBot2025!')
PHONE_NUMBER_ID = os.environ.get('WHATSAPP_PHONE_NUMBER_ID', '')
WHATSAPP_API_URL = f"https://graph.facebook.com/v21.0/{PHONE_NUMBER_ID}/messages" if PHONE_NUMBER_ID else None

# Diccionario para guardar el estado de la conversaci√≥n de cada usuario (la "memoria" del bot)
user_sessions = {}


# ==============================================================================
# 2. √ÅREA DE CONFIGURACI√ìN DEL NEGOCIO (Aqu√≠ es donde modificas TODO en el futuro)
# ==============================================================================

INFO_NEGOCIO = {
    "productos": {
        "producto_1": {
            "nombre_completo": "Collar M√°gico Sol Radiant",
            "precio": "S/ 69.00",
            "material": "Acero inoxidable quir√∫rgico de alta calidad",
            "propiedades": "Piedra termocr√≥mica que cambia de color con la temperatura.",
            "palabras_clave": ["1", "sol radiant", "collar m√°gico", "collar que cambia color"]
        },
        "producto_2": {
            "nombre_completo": "Aretes Constelaci√≥n Lunar",
            "precio": "S/ 59.00",
            "material": "Acero inoxidable con incrustaciones de zirc√≥n.",
            "propiedades": "Brillan sutilmente en la oscuridad despu√©s de exponerse a la luz.",
            "palabras_clave": ["2", "aretes", "lunar", "constelaci√≥n", "brillan"]
        }
    },
    "politicas_envio": {
        "delivery_lima": {
            "modalidad": "Pago Contra Entrega a domicilio",
            "costo": "Gratis",
            "adelanto_requerido": "No requiere adelanto",
            "tiempo_entrega": "1 a 2 d√≠as h√°biles"
        },
        "envio_shalom": {
            "modalidad": "Recojo en agencia Shalom",
            "costo": "Gratis",
            "adelanto_requerido": "S/ 20.00",
            "tiempo_entrega_lima_sin_cobertura": "2 a 3 d√≠as h√°biles",
            "tiempo_entrega_provincias": "3 a 7 d√≠as h√°biles",
            "info_adicional": "Todos los env√≠os a provincias y zonas de Lima sin cobertura son √∫nicamente por Shalom."
        }
    },
    "datos_generales": {
        "tienda_fisica": "No contamos con tienda f√≠sica. Somos una tienda 100% online para ofrecerte los mejores precios.",
        "garantia": "Ofrecemos una garant√≠a de 15 d√≠as por cualquier defecto de f√°brica.",
        "material_joyas": "Todas nuestras joyas son de acero inoxidable quir√∫rgico de alta calidad, son hipoalerg√©nicas y resistentes.",
        "medida_cadena": "El largo est√°ndar de nuestras cadenas es de 45 cm.",
        "empaque": "¬°S√≠! Todas tus compras incluyen una hermosa cajita de regalo üéÅ.",
        "metodos_pago": {
            "contra_entrega": "Para delivery en Lima puedes pagar con Efectivo, Yape o Plin al momento de recibir tu pedido.",
            "adelanto_shalom": "El adelanto para env√≠os por Shalom puedes realizarlo por Yape, Plin o Transferencia bancaria."
        }
    }
}

COBERTURA_DELIVERY_LIMA = [
    "ate", "barranco", "bellavista", "bre√±a", "callao", "carabayllo",
    "carmen de la legua", "cercado de lima", "chorrillos", "comas", "el agustino",
    "independencia", "jesus maria", "la molina", "la perla", "la punta",
    "la victoria", "lince", "los olivos", "magdalena", "miraflores",
    "pueblo libre", "puente piedra", "rimac", "san borja", "san isidro",
    "san juan de lurigancho", "san juan de miraflores", "san luis",
    "san martin de porres", "san miguel", "santa anita", "surco",
    "surquillo", "villa el salvador", "villa maria del triunfo"
]

ABREVIATURAS_DISTRITOS = {
    "sjl": "san juan de lurigancho", "sjm": "san juan de miraflores", "smp": "san martin de porres",
    "vmt": "villa maria del triunfo", "ves": "villa el salvador", "lima centro": "cercado de lima"
}

# ==============================================================================
# 3. FUNCIONES DE L√ìGICA DEL BOT (El "cerebro" del bot)
# ==============================================================================

def verificar_cobertura(texto_usuario):
    texto = texto_usuario.lower().strip().replace('.', '').replace(',', '')
    for distrito in COBERTURA_DELIVERY_LIMA:
        if distrito in texto:
            return distrito.title()
    for abreviatura, nombre_completo in ABREVIATURAS_DISTRITOS.items():
        if re.search(r'\b' + re.escape(abreviatura) + r'\b', texto):
            return nombre_completo.title()
    return None

def buscar_producto(texto_usuario, return_key=False):
    texto = texto_usuario.lower()
    for key, producto_info in INFO_NEGOCIO["productos"].items():
        for palabra in producto_info["palabras_clave"]:
            if palabra in texto:
                return (key, producto_info) if return_key else producto_info
    return (None, None) if return_key else None

def generate_response(text, name, from_number):
    text = text.lower()
    if any(palabra in text for palabra in ['comprar', 'pedido', 'coordinar', 'quiero uno']):
        user_sessions[from_number] = {'state': 'awaiting_product_selection'}
        productos_disponibles = [f"{idx+1}Ô∏è‚É£ {prod['nombre_completo']}" for idx, prod in enumerate(INFO_NEGOCIO['productos'].values())]
        texto_productos = "\n".join(productos_disponibles)
        return (f"¬°Excelente decisi√≥n, {name}! ‚ú®\n\nEstos son los productos que tenemos disponibles:\n{texto_productos}\n\n"
                "¬øCu√°l de ellos te gustar√≠a llevar? Por favor, ind√≠came el n√∫mero o nombre.")
    
    distrito_encontrado = verificar_cobertura(text)
    if distrito_encontrado:
        return f"¬°Buenas noticias, {name}! S√≠ tenemos cobertura de delivery contra entrega en {distrito_encontrado}. üéâ Puedes iniciar tu pedido escribiendo 'comprar'."
    
    producto_encontrado = buscar_producto(text)
    if producto_encontrado:
        return (f"¬°Te refieres a nuestro incre√≠ble {producto_encontrado['nombre_completo']}! ‚òÄÔ∏è\n\n"
                f"Caracter√≠sticas: {producto_encontrado['propiedades']}.\n"
                f"Material: {producto_encontrado['material']}.\nPrecio: {producto_encontrado['precio']}.\n\n"
                f"Para ordenarlo, solo escribe 'comprar'.")

    # ... (otras respuestas generales se mantienen igual) ...
    saludos_comunes = ['hola', 'hila', 'ola', 'buenos', 'buenas', 'bnas', 'qu√© tal', 'q tal', 'info']
    if any(saludo in text for saludo in saludos_comunes):
        productos_disponibles = [f"{idx+1}Ô∏è‚É£ {INFO_NEGOCIO['productos'][key]['nombre_completo']}" for idx, key in enumerate(INFO_NEGOCIO['productos'])]
        texto_productos = "\n".join(productos_disponibles)
        return (f"¬°Hola {name}! üëã‚ú® Soy tu asesora virtual de Daaqui Joyas.\n\n"
                f"Tenemos en stock estas joyas m√°gicas con env√≠o gratis:\n\n{texto_productos}\n\n"
                f"Escribe el n√∫mero o el nombre del producto que te gustar√≠a conocer.")
    
    return f"¬°Hola {name}! üëã No entend√≠ tu consulta. Puedes preguntar sobre:\n\n- Nuestros productos (ej: 'collar sol radiant')\n- 'env√≠o'\n- 'pagos'"

def handle_sales_flow(user_id, user_name, user_message):
    session = user_sessions.get(user_id, {})
    current_state = session.get('state')

    if current_state == 'awaiting_product_selection':
        producto_key, producto_info = buscar_producto(user_message, return_key=True)
        if producto_info:
            session.update({'state': 'awaiting_district', 'producto': producto_info['nombre_completo'], 'producto_key': producto_key})
            return f"¬°Confirmado: {producto_info['nombre_completo']}! Ahora, por favor, ind√≠came tu distrito para coordinar el env√≠o."
        else:
            return "No pude identificar el producto. Por favor, intenta con el n√∫mero o nombre exacto."

    elif current_state == 'awaiting_district':
        distrito = verificar_cobertura(user_message)
        if distrito:
            session.update({'state': 'delivery_confirmation', 'distrito': distrito})
            return (f"¬°Perfecto, delivery para {distrito}! üéâ El pago es contra entrega.\n\nPara confirmar, por favor, env√≠ame en un solo mensaje:\n- Tu nombre completo\n- Tu DNI\n- Tu n√∫mero de celular de contacto")
        else:
            session.update({'state': 'shalom_confirmation', 'distrito': user_message.title()})
            return (f"Entendido. Para {user_message.title()} el env√≠o es por Shalom. Se requiere un adelanto de {INFO_NEGOCIO['politicas_envio']['envio_shalom']['adelanto_requerido']}.\n\nSi est√°s de acuerdo, env√≠ame en un solo mensaje:\n- Tu nombre completo\n- Tu DNI\n- Tu n√∫mero de celular de contacto")

    elif current_state in ['delivery_confirmation', 'shalom_confirmation']:
        producto_key = session.get('producto_key', 'producto_1') # Default a producto_1 si no hay key
        producto_info = INFO_NEGOCIO['productos'].get(producto_key, {})

        datos_del_pedido = {
            'fecha': datetime.now().strftime("%Y-%m-%d %H:%M:%S"), 'nombre_completo': user_message.split('\n')[0].strip(),
            'dni': next((line.split(':')[1].strip() for line in user_message.split('\n') if 'dni' in line.lower()), 'No especificado'),
            'celular': user_id, 'distrito': session.get('distrito', ''),
            'producto_seleccionado': session.get('producto', ''), 'forma_pago': 'Contra Entrega' if current_state == 'delivery_confirmation' else 'Adelanto Shalom',
            'total': producto_info.get('precio', 'N/A'),
            # Dejamos estos en blanco ya que el bot no los pide actualmente
            'direccion': '', 'referencia': ''
        }
        
        exito_al_guardar = guardar_pedido(datos_del_pedido)
        if exito_al_guardar:
            logger.info(f"NUEVA VENTA GUARDADA EN SHEETS: {datos_del_pedido}")
        else:
            logger.error(f"FALLO AL GUARDAR VENTA EN SHEETS para el pedido: {datos_del_pedido}")

        del user_sessions[user_id]
        return "¬°Excelente! Hemos registrado tu pedido. Un asesor se pondr√° en contacto contigo en breve para coordinar los √∫ltimos detalles. ¬°Gracias por tu compra en Daaqui Joyas! üíñ"
    
    return None

# ==============================================================================
# 4. FUNCIONES INTERNAS DEL BOT (Normalmente no se tocan)
# ==============================================================================

@app.route('/api/webhook', methods=['GET', 'POST'])
def webhook():
    if request.method == 'GET':
        mode, token, challenge = request.args.get('hub.mode'), request.args.get('hub.verify_token'), request.args.get('hub.challenge')
        if mode == 'subscribe' and token == VERIFY_TOKEN:
            return challenge
        return 'Forbidden', 403
    elif request.method == 'POST':
        try:
            data = request.get_json()
            if data.get('object') == 'whatsapp_business_account':
                for entry in data.get('entry', []):
                    for change in entry.get('changes', []):
                        value = change.get('value', {})
                        if change.get('field') == 'messages' and value.get('messages'):
                            for message in value.get('messages'):
                                process_message(message, value.get('contacts', []))
            return jsonify({'status': 'success'}), 200
        except Exception as e:
            logger.error(f"Error procesando webhook: {e}")
            return jsonify({'error': str(e)}), 500

def process_message(message, contacts):
    try:
        from_number = message.get('from')
        if message.get('type') != 'text': return
        contact_name = next((c.get('profile', {}).get('name', 'Usuario') for c in contacts if c.get('wa_id') == from_number), 'Usuario')
        text_body = message.get('text', {}).get('body', '')
        
        logger.info(f"Procesando de {contact_name} ({from_number}): '{text_body}'")
        
        response_text = handle_sales_flow(from_number, contact_name, text_body) if from_number in user_sessions else generate_response(text_body, contact_name, from_number)
        
        if response_text:
            send_whatsapp_message(from_number, {"type": "text", "text": {"body": response_text}})
    except Exception as e:
        logger.error(f"Error en process_message: {e}")

def send_whatsapp_message(to_number, message_data):
    if not WHATSAPP_TOKEN or not WHATSAPP_API_URL:
        logger.error("Token de WhatsApp o URL de API no configurados.")
        return
    headers = {'Authorization': f'Bearer {WHATSAPP_TOKEN}', 'Content-Type': 'application/json'}
    data = {"messaging_product": "whatsapp", "to": to_number, **message_data}
    try:
        response = requests.post(WHATSAPP_API_URL, headers=headers, json=data)
        response.raise_for_status()
        logger.info(f"Mensaje enviado a {to_number}")
    except requests.exceptions.RequestException as e:
        logger.error(f"Error enviando mensaje: {e.response.text if e.response else e}")

@app.route('/')
def home():
    return jsonify({'status': 'Bot Daaqui Activo'})

if __name__ == '__main__':
    app.run(debug=True)